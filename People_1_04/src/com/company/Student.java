package com.company;

import java.io.IOException;

public class Student extends Human{     // клас Student наслідується від класу Human
    String nameSchool;  // назва навчального закладу
    int st;  // розмір стипендії
    //################################################################################################################################################################################################
    Student (){ // конструктор по замовчуванню
        nameSchool="?";
        st=0;
    }
    //################################################################################################################################################################################################
    Student (int idValue,String nameValue, String surnameValue, int birthValue,int fatherValue, int motherValue,String  ns,int st, int ... childrenValue){ // перевантажений конструктор з параметрами
        super(idValue,nameValue,surnameValue,birthValue,fatherValue,motherValue,childrenValue);     // для параметрів, що мають бути записані у поля суперкласу, викликає конструктор суперкласу
        nameSchool=ns;  // у назву школи запис переданого у конструктор значення
        this.st=st; // аналогічно з степендією, але якщо назви змінної поля класу і змінної параметра конструктора співпадають, змінної параметра конструктора перекриває іншу, тому до поля класу доступ є через this
    }
    Student (int idValue,String nameValue, String surnameValue, int birthValue,String  ns, int st){ // перевантажений конструктор з параметрами
        super(idValue,nameValue,surnameValue,birthValue);     // для параметрів, що мають бути записані у поля суперкласу, викликає конструктор суперкласу
        nameSchool=ns;  // у назву школи запис переданого у конструктор значення
        this.st=st; // аналогічно з степендією, але якщо назви змінної поля класу і змінної параметра конструктора співпадають, змінної параметра конструктора перекриває іншу, тому до поля класу доступ є через this
    }
    //################################################################################################################################################################################################
    void print() {      // цей метод перевизначає аналогічний із суперкласу Human
        System.out.println(id+" "+name + " " + surname + " " + birth+" "+nameSchool+" "+st);
    }
    //################################################################################################################################################################################################
    String druk() {      // цей метод перевизначає аналогічний із суперкласу Human
        return id+" "+ name + " " + surname + " " + birth+" "+nameSchool+" "+st;
    }
    //################################################################################################################################################################################################
    double dochid(){    // цей метод перевизначає аналогічний із суперкласу Human
        return st*12;   // але вже повертає ненульовий річний дохід
    }

}
